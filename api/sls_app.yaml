service: newsletter-api

frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:*"
    - Effect: Allow
      Action:
        - ses:*
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - !Join [ "", [ "arn:aws:s3:::",  '${self:custom.S3_BUCKET_ARTICLE_ASSETS}' ] ]
        - !Join [ "", [ "arn:aws:s3:::",  '${self:custom.S3_BUCKET_ARTICLE_ASSETS}', "/*" ] ]

# you can define service wide environment variables here
  environment:
    DYNAMO_TABLE_RECIPIENTS: ${self:custom.DYNAMO_TABLE_RECIPIENTS}
    DYNAMO_TABLE_ARTICLE_ARCHIVE: ${self:custom.DYNAMO_TABLE_ARTICLE_ARCHIVE}
    S3_BUCKET_ARTICLE_ASSETS: ${self:custom.S3_BUCKET_ARTICLE_ASSETS}
    ENV_DEPLOYMENT: ${self:provider.stage}
    CLOUDFRONT_URL: ${self:custom.CLOUDFRONT_URL}

custom:
  PERSIST_STACK_NAME: newsletter-api-data-persistence
  DYNAMO_TABLE_RECIPIENTS: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.RecipientTableName}
  DYNAMO_TABLE_ARTICLE_ARCHIVE: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.ArticleArchivesTableName}
  S3_BUCKET_ARTICLE_ASSETS: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.ArticleAssetsBucketName}
  CLOUDFRONT_URL: 'https://${cf:${self:service}-${self:provider.stage}.CFDomain}'
  customDomain:
    domainName: api.oyster.io
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true


package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  addemail:
    handler: bin/addemail
    description: 'Records the passed in email to the recipients database'
    timeout: 15 # in seconds (API Gateway has a timeout of 30 seconds)
    events:
      - http:
          path: email
          method: post
          cors: true
#            origins:
#              - '${ssm:/news/prod/ClientDomain}'
#            headers:
#              - Content-Type
#              - Accept-Encoding
#              - X-Bearer-Token
#            allowCredentials: true
  getemails:
    handler: bin/getemails
    description: 'Returns the recorded emails within the table'
    timeout: 15 # in seconds (API Gateway has a timeout of 30 seconds)
    events:
      - http:
          path: getemails
          method: get
          cors: true
  addarchivedarticle:
    handler: bin/addarchivedarticle
    description: 'Adds the preview data of the articles to the article archive'
    timeout: 15
    events:
      - http:
          path: archivedarticle
          method: post
          cors: true
  getarticles:
    handler: bin/getarticles
    description: 'retrieves a list of archived articles from the dynamodb table'
    timeout: 15
    events:
      - http:
          path: archivedentries
          method: get
          cors: true

#plugins:
#  - serverless-domain-manager

# you can add CloudFormation resource templates here
resources:
  Description: The stateless api of the newsletter project
  Resources:
    CloudfrontOAI: ${file(./resource/cdn/AssetsOriginAccessIdentity.yaml)}
    WebsiteCDN: ${file(./resource/cdn/AssetsCloudFrontDistribution.yaml)}
#    WebsiteDNSRecord: ${file(./resource/cdn/CDNDNSRecord.yaml)}
    CFBucketPolicyS3: ${file(./resource/cdn/CloudFrontS3BucketPolicy.yaml)}
  Outputs:
    CFDomain:
      Value: { "Fn::GetAtt": [ WebsiteCDN, DomainName ] }
      Export:
        Name: !Join [ "-", [ !Ref "AWS::StackName", CFDomain ] ]

